<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sCarPink</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables

maxSpeed = 40;
maxTurnAccel = 10;
turnSpeed = 6;
turnAccel = 0;
angularDrag = 0.7;
drag = 0.95;
accel = 1.5;
var lastDirection;

drift = false;
spinTimer = 0;
spinoutDirection = 0;
var dirToObj;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controls
image_angle = direction;

lastDirection = direction;

dirdiff = abs(direction - lastDirection);

speed *= drag;
turnAccel *= angularDrag;
direction += turnAccel * (speed/maxSpeed);

if(turnAccel &gt; maxTurnAccel)
{
    turnAccel = maxTurnAccel;
}

if(turnAccel &lt; -maxTurnAccel)
{
    turnAccel = -maxTurnAccel;
}

if(speed &gt; maxSpeed)
{
    speed = maxSpeed;
}

if(abs(speed) &lt; 1)
{
    speed = 0;
}

if(keyboard_check(ord('W')) || joystick_check_button(1,4))
{
    speed += accel;
}

if(keyboard_check(ord('S')) || joystick_check_button(1,3))
{
    speed -= accel;   
}

if(keyboard_check(ord('A')) || joystick_direction(id)=100)
{
    //direction += turnAccel;
    turnAccel += turnSpeed;
}

if(keyboard_check(ord('D')) || joystick_direction(id)=102)
{
    //direction -= turnAccel;
    turnAccel -= turnSpeed;
}

if(turnAccel &gt; 0 &amp;&amp; keyboard_check(ord('M')))
{
    //drift = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///debug

if(keyboard_check(ord('R')))
{
    room_restart();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///collision

if(spinTimer)
{
    direction += spinoutDirection*(speed/maxSpeed);
    spinTimer--;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oNPC">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>move_bounce_solid(true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oBuilding">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dirToObj = point_direction(x,y,other.x+48,other.y+48);

show_debug_message("direction to building from player: " + string(dirToObj) + "player's direction: " + string(direction) + "Difference: " +string(dirToObj-direction));
  
move_bounce_solid(true);
  
/* 
if(abs(direction - dirToObj) &lt; 15)
{
    speed = -speed*0.5;
    x = xprevious;
    y = yprevious;
}   
else
{
    direction += (direction - dirToObj);
    speed *= 0.5;
    //move_bounce_solid(false);
}
    
  
    
   
    //speed *= 0.5;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

//draw_text(view_hview/2,view_yview/2,("direction: " + direction));

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///debug

draw_text(x,y, string(direction));
draw_text(x + 100,y, string(speed));
draw_text(x + 150,y, string(speed/maxSpeed));
draw_text(x + 150,y+50, string(speed));
draw_line(x,y,x+lengthdir_x(speed*10,direction),y+lengthdir_y(speed*10,direction));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

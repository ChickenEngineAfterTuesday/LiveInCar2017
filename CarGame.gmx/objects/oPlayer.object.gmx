<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sCarPink</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-5000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables

angle_dif = 0;

//Particle system
psys = part_system_create();
part_system_automatic_draw(psys, false);
part_system_position(psys,0,0);

emm = part_emitter_create(psys);

//Tire particle
tyre_part = part_type_create();
part_type_sprite(tyre_part,sTiredust,false,false,false);
part_type_life(tyre_part, 10, 30);
part_type_alpha2(tyre_part,0.025,0);

//Fire particle
fyre_part = part_type_create();
part_type_sprite(fyre_part,sFiredust,false,false,false);
part_type_life(fyre_part,10,30);
part_type_alpha2(fyre_part,0.2,0);

var forwardx, forwardy
speedinc = 155;
speedmultiplier = 3;
speedhowlong = 30;
seconds = 10;
speedtimer = seconds*room_speed;
boost = false;
boostx = 0;
boosty = 0;
fuel = 100;
cash = 35;

fueltimer = 15;
alarm[0] = room_speed * fueltimer;
canBuyGas = true;


/*
maxSpeed = 40;
maxTurnAccel = 10;
turnSpeed = 6;
turnAccel = 0;
angularDrag = 0.7;
drag = 0.95;
accel = 1.5;
var lastDirection;

drift = false;
spinTimer = 0;
spinoutDirection = 0;
var dirToObj;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canBuyGas = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>fuel-=10;
alarm[0] = room_speed * fueltimer;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controls
image_angle = direction;

//Particle systems
if(phy_speed &gt; 1)
{
    part_emitter_region(psys, emm, x - 1, x + 1, y - 1, y + 1, ps_shape_rectangle, ps_distr_gaussian);
    inertia_dir = point_direction(x, y, x + phy_speed_x, y + phy_speed_y);
    forward_dir = point_direction(x, y, x + lengthdir_x(50,-phy_rotation), y + lengthdir_y(50, -phy_rotation));

    angle_dif = abs(angle_difference(forward_dir, inertia_dir));
    if (angle_dif &gt; 20)
    { //render tires on floor
        part_type_orientation(tyre_part, -phy_rotation, phy_rotation, 0, 0, 0);
        part_emitter_burst(psys, emm, tyre_part, 20);
    }
}

//Controls
if(keyboard_check(vk_up) || joystick_check_button(1,4)) //Acceleration is Y on controller or Up Arrow on keyboard
{
    forwardx = lengthdir_x(speedinc, -phy_rotation);
    forwardy = lengthdir_y(speedinc, -phy_rotation);
    
    physics_apply_force(x,y,forwardx,forwardy);
    
    if(!audio_is_playing(motor)) &amp;&amp; (!audio_is_playing(speech))
    {
        audio_play_sound(motor,5,0);
    }
}

if(keyboard_check(vk_down) || joystick_check_button(1,3)) //Deceleration is B on controller or Down Arrow on keyboard
{
    forwardx = lengthdir_x(speedinc, -phy_rotation);
    forwardy = lengthdir_y(speedinc, -phy_rotation);
    
    physics_apply_force(x,y,-forwardx,-forwardy);
    
    if(!audio_is_playing(motor))
    {
        audio_play_sound(motor,5,0);
    }
}

if((keyboard_check(vk_left) &amp;&amp; keyboard_check(vk_up)) || (joystick_direction(id)=100 &amp;&amp; joystick_check_button(1,4))) //Left turn is &lt;- on controller or Left Arrow on keyboard
{ //Steering left while moving forward
    
    phy_rotation -= 2.7
}

if((keyboard_check(vk_right) &amp;&amp; keyboard_check(vk_up)) || (joystick_direction(id)=102 &amp;&amp; joystick_check_button(1,4))) //Right turn is -&gt; on controller or Right Arrow on keyboard
{ //Steering right while moving forward
    phy_rotation += 2.7;
    
}

if((keyboard_check(vk_left) &amp;&amp; keyboard_check(vk_down)) || (joystick_direction(id)=100 &amp;&amp; joystick_check_button(1,3))) //Left turn is &lt;- on controller or Left Arrow on keyboard
{ //Steering left while moving backward
    
    phy_rotation += 2.7
}

if((keyboard_check(vk_right) &amp;&amp; keyboard_check(vk_down)) || (joystick_direction(id)=102 &amp;&amp; joystick_check_button(1,3))) //Right turn is -&gt; on controller or Right Arrow on keyboard
{ //Steering right while moving backward
    phy_rotation -= 2.7;
    
}

if(keyboard_check(vk_alt) || joystick_check_button(1,7)) //Map is L on controller or Space on keyboard
{
    /*if(view_visible[0] = true)
    {
        view_visible[0] = false;
        view_visible[1] = true;
    }
    else
    {
        view_visible[1] = false;
        view_visible[0] = true;
    }*/
    
    view_visible[1] = true;
    view_visible[0] = false;
}
else
{
    view_visible[0] = true;
    view_visible[1] = false;
}

//colton edits

boost = false;
speedtimer--;

if(keyboard_check_direct(vk_space) || joystick_check_button(1,8)) //Boost is R on controller or Shift on keyboard
{
    if(speedhowlong &gt; 0)
    {
        boost = true;
        speedhowlong--;
    }
}

if(speedtimer == 0)
{
    speedtimer = seconds*room_speed;
    speedhowlong = 30;
}

if(boost)
{

      boostx = lengthdir_x(speedinc*speedmultiplier, -phy_rotation);
      boosty = lengthdir_y(speedinc*speedmultiplier, -phy_rotation);
      physics_apply_force(x,y,boostx,boosty);
      part_emitter_region(psys, emm, x - 10, x + 10, y - 10, y + 10, ps_shape_ellipse, ps_distr_linear);
      part_type_orientation(fyre_part, -phy_rotation, phy_rotation, 0, 0, 0);
      part_emitter_burst(psys, emm, fyre_part, 40);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oBarrel">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///

physics_apply_impulse(other.x,other.y,400,400);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oSandwichShop">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oGasStation">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(cash-25 &gt;= 0 &amp;&amp; canBuyGas)
{
    cash -= 25;
    fuel = 100;
    canBuyGas = false;
    alarm[1] = 30;
    alarm[0] = room_speed * fueltimer;
    
    
}
else
{
    physics_apply_impulse(other.x,other.y,400,400);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oBuilding">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Particles

part_system_drawit(psys);

draw_self();

//draw_text(x-20, y-20, string(angle_dif));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///debug

//draw_text(x,y, string(direction));
//draw_text(x + 100,y, string(speed));
//draw_text(x + 150,y, string(speed/maxSpeed));
//draw_text(x + 150,y+50, string(speed));
//draw_line(x,y,x+lengthdir_x(speed*10,direction),y+lengthdir_y(speed*10,direction));

if(view_visible[1] == true)
{
    draw_set_color(c_yellow);
    draw_circle(oPlayer.phy_position_x,oPlayer.phy_position_y,100,1);
    draw_set_color(c_white);
}

/*draw_text(x,y,speedhowlong);//
draw_text(x+30,y,speedtimer);*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>1</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.800000011920929</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>3</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>32,24</point>
    <point>0,24</point>
    <point>0,8</point>
    <point>32,8</point>
  </PhysicsShapePoints>
</object>
